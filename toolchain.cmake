set(CMAKE_SYSTEM_NAME Linux)
set(CMAKE_SYSTEM_PROCESSOR ARM)

if(MINGW OR CYGWIN OR WIN32)
	set(UTIL_SEARCH_CMD where)
elseif(UNIX OR APPLE)
	set(UTIL_SEARCH_CMD which)
endif()

# Generate a static library when cmake checks run try_compile()
# We do this to prevent the linker running while cross compiling
set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)

set(TOOLCHAIN_PREFIX arm-none-eabi-)

execute_process(
	COMMAND ${UTIL_SEARCH_CMD} ${TOOLCHAIN_PREFIX}gcc
	OUTPUT_VARIABLE BINUTILS_PATH
	OUTPUT_STRIP_TRAILING_WHITESPACE
)

get_filename_component(ARM_TOOLCHAIN_DIR ${BINUTILS_PATH} DIRECTORY)
set(ARM_GCC_C_COMPILER ${TOOLCHAIN_PREFIX}gcc)

execute_process(
	COMMAND ${ARM_GCC_C_COMPILER} -print-sysroot
	OUTPUT_VARIABLE ARM_GCC_SYSROOT
	OUTPUT_STRIP_TRAILING_WHITESPACE
)

set(CMAKE_AR			llvm-ar			CACHE INTERNAL "archiver tool")
set(CMAKE_OBJCOPY		llvm-objcopy	CACHE INTERNAL "objcopy tool")
set(CMAKE_RANLIB		llvm-ranlib		CACHE INTERNAL "ranlib tool")
set(CMAKE_SIZE_UTIL		llvm-size		CACHE INTERNAL "size tool")

set(ARM_CPU			"cortex-m7"			CACHE STRING "" FORCE)
set(triple			"armv7em-none-eabi")
set(fpu_flags		"-mfpu=fpv5-dp-d16 -mfloat-abi=hard")
set(cpu_flags		"-mtune=cortex-m7 -mthumb -mimplicit-it=always ${fpu_flags} -B${ARM_TOOLCHAIN_DIR} -DARM_MATH_CM7=true -D__SAMV71Q21B__")
set(extra_flags		"-fno-strict-aliasing -ffunction-sections -fdata-sections")
set(warnings 		"-Wall -Wextra -pedantic")

# Default Assembler flags
set(CMAKE_ASM_COMPILER clang)
set(CMAKE_ASM_COMPILER_TARGET				${triple})
set(CMAKE_ASM_FLAGS_INIT					"${cpu_flags} -x assembler-with-cpp")
set(CMAKE_ASM_FLAGS_DEBUG_INIT				${CMAKE_ASM_FLAGS_INIT})
set(CMAKE_ASM_FLAGS_DEBUG					${CMAKE_ASM_FLAGS_INIT}				CACHE STRING "" FORCE)
set(CMAKE_ASM_FLAGS_RELEASE_INIT			${CMAKE_ASM_FLAGS_INIT})
set(CMAKE_ASM_FLAGS_RELEASE					${CMAKE_ASM_FLAGS_INIT}				CACHE STRING "" FORCE)
set(CMAKE_ASM_FLAGS_MINSIZEREL_INIT			${CMAKE_ASM_FLAGS_INIT})
set(CMAKE_ASM_FLAGS_MINSIZEREL				${CMAKE_ASM_FLAGS_INIT}				CACHE STRING "" FORCE)
set(CMAKE_ASM_FLAGS_RELWITHDEBINFO_INIT		${CMAKE_ASM_FLAGS_INIT})
set(CMAKE_ASM_FLAGS_RELWITHDEBINFO			${CMAKE_ASM_FLAGS_INIT}				CACHE STRING "" FORCE)

# Default C compiler flags
set(CMAKE_C_COMPILER						clang)
set(CMAKE_C_COMPILER_TARGET 				${triple})
set(CMAKE_C_FLAGS_INIT 						"${cpu_flags} ${extra_flags} -std=c17")
set(CMAKE_C_FLAGS_DEBUG_INIT				"-Og -g3 ${warnings} -DDEBUG")
set(CMAKE_C_FLAGS_DEBUG						${CMAKE_C_FLAGS_DEBUG_INIT}				CACHE STRING "" FORCE)
set(CMAKE_C_FLAGS_RELEASE_INIT				"-O3 ${warnings} -DNDEBUG")
set(CMAKE_C_FLAGS_RELEASE					${CMAKE_C_FLAGS_RELEASE_INIT}			CACHE STRING "" FORCE)
set(CMAKE_C_FLAGS_MINSIZEREL_INIT			"-Oz ${warnings} -DNDEBUG")
set(CMAKE_C_FLAGS_MINSIZEREL				${CMAKE_C_FLAGS_MINSIZEREL_INIT}		CACHE STRING "" FORCE)
set(CMAKE_C_FLAGS_RELWITHDEBINFO_INIT		"-O2 -g ${warnings} -DNDEBUG")
set(CMAKE_C_FLAGS_RELWITHDEBINFO			${CMAKE_C_FLAGS_RELWITHDEBINFO_INIT}	CACHE STRING "" FORCE)

# Default C++ compiler flags
set(CMAKE_CXX_COMPILER						clang++)
set(CMAKE_CXX_COMPILER_TARGET 				${triple})
set(CMAKE_CXX_FLAGS_INIT 					"${cpu_flags} ${extra_flags} -std=c++17")
set(CMAKE_CXX_FLAGS_DEBUG_INIT				${CMAKE_C_FLAGS_DEBUG_INIT})
set(CMAKE_CXX_FLAGS_DEBUG					${CMAKE_C_FLAGS_DEBUG_INIT}				CACHE STRING "" FORCE)
set(CMAKE_CXX_FLAGS_RELEASE_INIT			${CMAKE_C_FLAGS_RELEASE_INIT})
set(CMAKE_CXX_FLAGS_RELEASE					${CMAKE_C_FLAGS_RELEASE_INIT}			CACHE STRING "" FORCE)
set(CMAKE_CXX_FLAGS_MINSIZEREL_INIT			${CMAKE_C_FLAGS_MINSIZEREL_INIT})
set(CMAKE_CXX_FLAGS_MINSIZEREL				${CMAKE_C_FLAGS_MINSIZEREL_INIT} 		CACHE STRING "" FORCE)
set(CMAKE_CXX_FLAGS_RELWITHDEBINFO_INIT		${CMAKE_C_FLAGS_RELWITHDEBINFO_INIT})
set(CMAKE_CXX_FLAGS_RELWITHDEBINFO			${CMAKE_C_FLAGS_RELWITHDEBINFO_INIT}	CACHE STRING "" FORCE)

# Default Linker flags
set(CMAKE_EXE_LINKER_FLAGS_INIT					"--entry=Reset_Handler -nostdlib --gc-sections -Map=${CMAKE_PROJECT_NAME}.map --cref -fuse-lld")
set(CMAKE_EXE_LINKER_FLAGS_DEBUG_INIT			"-q")
set(CMAKE_EXE_LINKER_FLAGS_DEBUG				${CMAKE_EXE_LINKER_FLAGS_DEBUG_INIT}			CACHE STRING "" FORCE)
set(CMAKE_EXE_LINKER_FLAGS_RELEASE_INIT			"-S -flto")
set(CMAKE_EXE_LINKER_FLAGS_RELEASE				${CMAKE_EXE_LINKER_FLAGS_RELEASE_INIT}			CACHE STRING "" FORCE)
set(CMAKE_EXE_LINKER_FLAGS_MINSIZEREL_INIT		"-s -flto")
set(CMAKE_EXE_LINKER_FLAGS_MINSIZEREL			${CMAKE_EXE_LINKER_FLAGS_MINSIZEREL_INIT}		CACHE STRING "" FORCE)
set(CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO_INIT	"-flto")
set(CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO		${CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO_INIT}	CACHE STRING "" FORCE)

set(CMAKE_SYSROOT 							${ARM_GCC_SYSROOT})
set(CMAKE_FIND_ROOT_PATH					${ARM_GCC_SYSROOT})
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM 		NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY 		BOTH)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE 		BOTH)
